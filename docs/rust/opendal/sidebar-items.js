window.SIDEBAR_ITEMS = {"enum":[["EntryMode","EntryMode represents the mode."],["ErrorKind","ErrorKind is all kinds of Error of opendal."],["Metakey","Metakey describes the metadata keys that can be stored or queried."],["Scheme","Services that OpenDAL supports"]],"mod":[["docs","This module holds documentation for OpenDAL."],["layers","`Layer` is the mechanism to intercept operations."],["ops","Ops provides the operation args struct like [`OpRead`] for user."],["raw","Raw modules provide raw APIs that used by underlying services"],["services","Services will provide builders to build underlying backends."]],"struct":[["BlockingLister","BlockingLister is designed to list entries at given path in a blocking manner."],["BlockingOperator","BlockingOperator is the entry for all public blocking APIs."],["BlockingReader","BlockingReader is designed to read data from given path in an blocking manner."],["BlockingWriter","BlockingWriter is designed to write data into given path in an blocking manner."],["Entry","Entry is the file/dir entry returned by `Lister`."],["Error","Error is the error struct returned by all opendal functions."],["Lister","Lister is designed to list entries at given path in an asynchronous manner."],["Metadata","Metadata carries all metadata associated with an path."],["Operator","Operator is the entry for all public async APIs."],["OperatorBuilder","OperatorBuilder is a typed builder to builder an Operator."],["OperatorInfo","Metadata for operator, users can use this metadata to get information of operator."],["Reader","Reader is designed to read data from given path in an asynchronous manner."],["Writer","Writer is designed to write data into given path in an asynchronous manner."]],"trait":[["Builder","Builder is used to build a storage accessor used by [`Operator`]."]],"type":[["Result","Result that is a wrapper of `Result<T, opendal::Error>`"]]};