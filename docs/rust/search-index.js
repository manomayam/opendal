var searchIndex = JSON.parse('{\
"opendal":{"doc":"OpenDAL is the Open Data Access Layer to <strong>freely</strong>, <strong>painlessly</strong>â€¦","t":[16,13,13,13,3,3,3,3,8,13,13,13,13,13,13,13,13,13,13,3,4,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,4,13,13,13,13,13,3,3,3,13,13,13,3,13,6,13,13,18,4,13,13,13,13,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,3,3,3,3,3,3,3,3,3,3,3,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,4,4,3,4,13,13,4,13,13,13,13,13,13,16,16,13,16,16,13,13,13,16,16,13,3,3,13,13,13,13,13,13,3,6,3,3,13,16,8,8,16,13,13,13,4,16,16,13,13,3,13,13,13,13,16,16,13,13,3,3,3,3,3,3,3,3,3,3,3,13,13,13,17,13,13,16,16,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,5,5,5,5,11,11,11,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,0,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,8,6,8,13,6,13,8,13,6,13,3,3,3,13,13,8,4,6,8,13,8,4,6,13,3,3,8,13,4,6,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,5,11,11,11,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,3,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,3,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Accessor","AlreadyExists","Azblob","Azdfs","BlockingLister","BlockingOperator","BlockingReader","BlockingWriter","Builder","Complete","ConfigInvalid","ContentDisposition","ContentLength","ContentMd5","ContentRange","ContentType","Custom","DIR","Dashmap","Entry","EntryMode","Error","ErrorKind","Etag","FILE","Fs","Ftp","Gcs","Ghac","Hdfs","Http","Ipfs","Ipmfs","IsADirectory","IsSameFile","LastModified","Lister","Memcached","Memory","Metadata","Metakey","Mode","Moka","NotADirectory","NotFound","Obs","Operator","OperatorBuilder","OperatorInfo","Oss","PermissionDenied","RateLimited","Reader","Redis","Result","Rocksdb","S3","SCHEME","Scheme","Sled","Unexpected","Unknown","Unsupported","Webdav","Webhdfs","Writer","append","append","bitand","bitor","bitxor","blocking","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","can_batch","can_blocking","can_copy","can_list","can_presign","can_read","can_rename","can_scan","can_write","check","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","close","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","content_disposition","content_length","content_md5","content_range","content_type","copy","copy","create_dir","create_dir","default","default","default","delete","delete","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","docs","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","etag","finish","flush","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_env","from_env","from_env","from_iter","from_iter","from_iter","from_map","from_map","from_str","get_hash","hash","info","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_static","into_static","is_dir","is_dir","is_exist","is_exist","is_file","is_file","is_temporary","kind","last_modified","layer","layer","layers","limit","limit","list","list","map","metadata","metadata","mode","name","name","new","new","new","new","new","next","next","next","next_page","next_page","not","ops","path","poll_close","poll_complete","poll_flush","poll_next","poll_next","poll_next","poll_read","poll_read","poll_read","poll_seek","poll_seek","poll_write","presign_read","presign_read_with","presign_stat","presign_write","presign_write_with","provide","range_read","range_read","range_reader","range_reader","raw","read","read","read","read","reader","reader","reader_with","rem","remove","remove_all","remove_via","rename","rename","root","scan","scan","scheme","seek","seek","services","set_content_disposition","set_content_length","set_content_md5","set_content_range","set_content_type","set_etag","set_last_modified","set_mode","set_permanent","set_persistent","set_source","set_temporary","source","start_seek","stat","stat","sub","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_poll_next","try_poll_next","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_content_disposition","with_content_length","with_content_md5","with_content_range","with_content_type","with_context","with_etag","with_last_modified","with_limit","with_limit","with_mode","with_operation","write","write","write","write","write_with","write_with","writer","writer","writer_with","changelog","comparisons","concepts","features","internals","rfcs","upgrade","vs_object_store","accessor","layer","rfc_0000_example","rfc_0041_object_native_api","rfc_0044_error_handle","rfc_0057_auto_region","rfc_0069_object_stream","rfc_0090_limited_reader","rfc_0112_path_normalization","rfc_0191_async_streaming_io","rfc_0203_remove_credential","rfc_0221_create_dir","rfc_0247_retryable_error","rfc_0293_object_id","rfc_0337_dir_entry","rfc_0409_accessor_capabilities","rfc_0413_presign","rfc_0423_command_line_interface","rfc_0429_init_from_iter","rfc_0438_multipart","rfc_0443_gateway","rfc_0501_new_builder","rfc_0554_write_refactor","rfc_0561_list_metadata_reuse","rfc_0599_blocking_api","rfc_0623_redis_service","rfc_0627_split_capabilities","rfc_0661_path_in_accessor","rfc_0793_generic_kv_services","rfc_0926_object_reader","rfc_0977_refactor_error","rfc_1085_object_handler","rfc_1391_object_metadataer","rfc_1398_query_based_metadata","rfc_1420_object_writer","rfc_1477_remove_object_concept","rfc_1735_operation_extension","ChaosLayer","ConcurrentLimitLayer","ImmutableIndexLayer","LoggingLayer","MetricsLayer","MinitraceLayer","RetryLayer","TracingLayer","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","extend_iter","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","init","init","init","init","init","insert","into","into","into","into","into","into","into","into","layer","layer","layer","layer","layer","layer","layer","layer","new","new","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_error_level","with_factor","with_failure_level","with_jitter","with_max_delay","with_max_times","with_min_delay","BatchOperation","Delete","OpBatch","OpCopy","OpCreate","OpDelete","OpList","OpPresign","OpRead","OpRename","OpScan","OpStat","OpWrite","PresignOperation","Read","Stat","Write","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache_control","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","content_disposition","content_type","default","default","default","default","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","expire","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","if_none_match","if_none_match","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into_operation","limit","limit","mode","new","new","new","new","new","new","new","new","new","new","new","operation","operation","operation","override_cache_control","override_content_disposition","range","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_cache_control","with_content_disposition","with_content_type","with_if_none_match","with_if_none_match","with_limit","with_limit","with_override_cache_control","with_override_content_disposition","with_range","Accessor","AccessorCapability","AccessorHint","AccessorInfo","AsyncBody","Batch","Batch","BatchedReply","Blocking","BlockingCopy","BlockingCreate","BlockingDelete","BlockingList","BlockingMove","BlockingPager","BlockingPager","BlockingRead","BlockingReader","BlockingReader","BlockingScan","BlockingStat","BlockingWrite","BlockingWriter","BlockingWriter","Bytes","BytesContentRange","BytesRange","Copy","Copy","Create","Delete","Delete","Empty","ErrorResponse","FusedAccessor","HttpClient","IncomingAsyncBody","Info","Inner","Layer","LayeredAccessor","LayeredAccessor","List","List","Multipart","Operation","Pager","Pager","Presign","Presign","PresignedRequest","Read","Read","ReadSeekable","ReadStreamable","Reader","Reader","Rename","Rename","RpBatch","RpCopy","RpCreate","RpDelete","RpList","RpPresign","RpRead","RpRename","RpScan","RpStat","RpWrite","Scan","Scan","Stat","VERSION","Write","Write","Writer","Writer","adapters","apply_on_bytes","batch","batch","batch","batch","bitand","bitand","bitor","bitor","bitxor","bitxor","blocking_copy","blocking_copy","blocking_copy","blocking_copy","blocking_create","blocking_create","blocking_create","blocking_create","blocking_delete","blocking_delete","blocking_delete","blocking_delete","blocking_list","blocking_list","blocking_list","blocking_read","blocking_read","blocking_read","blocking_rename","blocking_rename","blocking_rename","blocking_rename","blocking_scan","blocking_scan","blocking_scan","blocking_stat","blocking_stat","blocking_stat","blocking_stat","blocking_write","blocking_write","blocking_write","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_abs_path","build_header_value","build_rel_path","build_rooted_abs_path","bytes","capabilities","client","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","consume","copy","copy","copy","copy","create","create","create","create","default","default","default","default","default","default","default","default","default","default","default","default","delete","delete","delete","delete","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format_authorization_by_basic","format_authorization_by_bearer","format_content_md5","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes_range","from_str","from_str","get_basename","get_hash","get_parent","hash","header","headers","hints","info","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","inner","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_metadata","into_metadata","into_presigned_request","into_results","into_static","is_full","layer","len","list","list","list","map_metadata","metadata","metadata","metadata","method","name","new","new","new","new","new","new","new","new","new","new","new","new_json_deserialize_error","new_json_serialize_error","new_request_build_error","new_request_credential_error","new_request_sign_error","new_xml_deserialize_error","normalize_path","normalize_root","not","not","offset","oio","parse_content_disposition","parse_content_length","parse_content_md5","parse_content_range","parse_content_type","parse_datetime_from_from_timestamp_millis","parse_datetime_from_rfc2822","parse_datetime_from_rfc3339","parse_error_response","parse_etag","parse_into_metadata","parse_last_modified","parse_location","percent_encode_path","poll_next","poll_read","poll_seek","presign","presign","presign","presign","range","range_inclusive","read","read","read","rem","rem","rename","rename","rename","rename","results","root","scan","scan","scan","scheme","send","serialize","set_capabilities","set_hints","set_name","set_root","set_scheme","size","size","stat","stat","stat","stat","status_code","sub","sub","to_bytes_range","to_header","to_header","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_range","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uri","validate_path","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_metadata","with_range","with_size","write","write","write","kv","Adapter","Backend","Metadata","append","append","blocking_append","blocking_append","blocking_create","blocking_delete","blocking_delete","blocking_delete","blocking_get","blocking_get","blocking_read","blocking_scan","blocking_scan","blocking_scan","blocking_set","blocking_set","blocking_stat","blocking_write","borrow","borrow","borrow_mut","borrow_mut","capabilities","clone","clone_into","compat","compat","compat_mut","compat_mut","compat_ref","compat_ref","create","delete","delete","deref","deref","deref_mut","deref_mut","drop","drop","fmt","from","from","get","info","init","init","into","into","metadata","name","new","new","read","scan","scan","scan","scheme","set","stat","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","with_root","write","Append","BlockingAppend","BlockingClose","BlockingNext","BlockingNext","BlockingPage","BlockingPager","BlockingRead","BlockingRead","BlockingReader","BlockingSeek","BlockingWrite","BlockingWrite","BlockingWriter","Close","Cursor","Entry","IntoStreamableReader","Next","Next","Page","PageOperation","Pager","Read","Read","ReadExt","ReadOperation","Reader","Seek","ToFlatPager","ToHierarchyPager","Write","Write","WriteOperation","Writer","append","append","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","close","close","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_blocking_reader","into_reader","into_static","into_static","into_static","into_streamable_reader","is_empty","mode","new","next","next","next","next","next","next","next","next","next","next","next","next","next","next","path","poll_next","poll_next","poll_next","poll_next","poll_read","poll_read","poll_read","poll_read","poll_seek","poll_seek","poll_seek","poll_seek","read","read","read","read","read","read","remaining_slice","seek","seek","seek","seek","seek","seek","set_mode","set_path","to_flat_pager","to_hierarchy_pager","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with","write","write","FdReader","borrow","borrow_mut","compat","compat_mut","compat_ref","deref","deref_mut","drop","from","from_fd","init","into","next","read","seek","try_from","try_into","type_id","vzip","FdReader","RangeReader","borrow","borrow","borrow_mut","borrow_mut","by_range","compat","compat","compat_mut","compat_mut","compat_ref","compat_ref","deref","deref","deref_mut","deref_mut","drop","drop","from","from","from_fd","init","init","into","into","poll_next","poll_next","poll_read","poll_read","poll_seek","poll_seek","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Azblob","Azdfs","Dashmap","Fs","Ftp","Gcs","Ghac","Hdfs","Http","Ipfs","Ipmfs","Memcached","Memory","Moka","Obs","Oss","Redis","Rocksdb","S3","Sled","Webdav","Webhdfs","access_key_id","access_key_id","access_key_id","access_key_secret","account_key","account_key","account_name","account_name","atomic_write_dir","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bucket","bucket","bucket","bucket","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","build","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_mut","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","compat_ref","container","credential","credential_path","customed_credential_load","customed_token_loader","datadir","datadir","db","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_storage_class","default_ttl","default_ttl","delegation","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","disable_config_load","disable_ec2_metadata","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","enable_create_simulation","enable_path_check","enable_virtual_host_style","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","endpoint","external_id","filesystem","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_connection_string","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","from_map","http_client","http_client","http_client","http_client","http_client","http_client","http_client","http_client","http_client","http_client","http_client","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","max_capacity","name","name_node","password","password","password","password","presign_endpoint","region","role_arn","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","root","sas_token","scope","secret_access_key","secret_access_key","security_token","segments","server_side_encryption","server_side_encryption_aws_kms_key_id","server_side_encryption_customer_algorithm","server_side_encryption_customer_key","server_side_encryption_customer_key_md5","server_side_encryption_with_aws_managed_kms_key","server_side_encryption_with_customer_key","server_side_encryption_with_customer_managed_kms_key","server_side_encryption_with_s3_key","service_account","thread_pool_enabled","time_to_idle","time_to_live","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","token","token","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","user","username","username","username","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":["opendalopendal::docs","","","","","","","opendal::docs::comparisons","opendal::docs::internals","","opendal::docs::rfcs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendal::layersopendal::opsopendal::rawopendal::raw::adapters","opendal::raw::adapters::kv","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendal::raw::oioopendal::raw::oio::into_blocking_reader","","","","","","","","","","","","","","","","","","","","opendal::raw::oio::into_reader","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","opendal::services","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The accessor that built by this builder.","The given path already exists thus we failed to the â€¦","azblob: Azure Storage Blob services.","azdfs: Azure Data Lake Storage Gen2.","BlockingLister is designed to list entries at given path â€¦","BlockingOperator is the entry for all public blocking APIs.","BlockingReader is designed to read data from given path in â€¦","BlockingWriter is designed to write data into given path â€¦","Builder is used to build a storage accessor used by â€¦","The special metadata key that used to mark this entry â€¦","The config for backend is invalid.","Key for content disposition.","Key for content length.","Key for content md5.","Key for content range.","Key for content type.","Custom that allow users to implement services outside of â€¦","DIR means the path can be listed.","dashmap: dashmap backend support.","Entry is the file/dir entry returned by <code>Lister</code>.","EntryMode represents the mode.","Error is the error struct returned by all opendal â€¦","ErrorKind is all kinds of Error of opendal.","Key for etag.","FILE means the path has data to read.","fs: POSIX alike file system.","ftp: FTP backend.","gcs: Google Cloud Storage backend.","ghac: GitHub Action Cache services.","hdfs: Hadoop Distributed File System.","http: HTTP backend.","ipmfs: IPFS HTTP Gateway","ipmfs: IPFS mutable file system","The given path is a directory.","The given file paths are same.","Key for last last modified.","Lister is designed to list entries at given path in an â€¦","memcached: Memcached service support.","memory: In memory backend support.","Metadata carries all metadata associated with an path.","Metakey describes the metadata keys that can be stored or â€¦","Key for mode.","moka: moka backend support.","The given path is not a directory.","The given path is not found.","obs: Huawei Cloud OBS services.","Operator is the entry for all public async APIs.","OperatorBuilder is a typed builder to build an Operator.","Metadata for operator, users can use this metadata to get â€¦","oss: Aliyun Object Storage Services","The given path doesnâ€™t have enough permission for this â€¦","Requests that sent to this path is over the limit, please â€¦","Reader is designed to read data from given path in an â€¦","redis: Redis services","Result that is a wrapper of <code>Result&lt;T, opendal::Error&gt;</code>","rocksdb: RocksDB services","s3: AWS S3 alike services.","Associated scheme for this builder.","Services that OpenDAL supports","sled: Sled services","OpenDAL donâ€™t know what happened here, and no actions â€¦","Unknown means we donâ€™t know what we can do on this path.","Underlying service doesnâ€™t support this operation.","webdav: WebDAV support.","webhdfs: WebHDFS RESTful API Services","Writer is designed to write data into given path in an â€¦","Append data into writer.","Append data into writer.","","","","Create a new blocking operator.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the accessor builder to build a service.","Check if current backend supports batch operations or not.","Check if current backend supports blocking operations or â€¦","Check if current backend supports <code>Accessor::copy</code> or not.","Check if current backend supports <code>Accessor::list</code> or not.","Check if current backend supports <code>Accessor::presign</code> or not.","Check if current backend supports <code>Accessor::read</code> or not.","Check if current backend supports <code>Accessor::rename</code> or not.","Check if current backend supports <code>Accessor::scan</code> or not.","Check if current backend supports <code>Accessor::write</code> or not.","Check if this operator can work correctly.","","","","","","","","","","","","","","","","","","","Close the writer and make sure all data have been stored.","Close the writer and make sure all data have been stored.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Content-Disposition of this entry","Content length of this entry.","Content MD5 of this entry.","Content Range of this entry.","Content Type of this entry.","Copy a file from <code>from</code> to <code>to</code>.","Copy a file from <code>from</code> to <code>to</code>.","Create a dir at given path.","Create a dir at given path.","","","","Delete the given path.","Delete given path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module holds documentation for OpenDAL.","","","","","","","","","","","","","","","","","","","","","","","","","","","","ETag of this entry.","Finish the building to construct an Operator.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a builder from envs.","Construct a builder from envs.","Create a new operator from env.","Construct a builder from given iterator.","Construct a builder from given iterator.","Create a new operator from iter.","Construct a builder from given map.","Create a new operator from given map.","","","","Get information of underlying accessor.","Get information of underlying accessor.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Convert self into static str.","Convert self into static str.","Check if this mode is DIR.","Returns <code>true</code> if this metadata is for a directory.","Check if this path exists or not.","Check if this path exists or not.","Check if this mode is FILE.","Returns <code>true</code> if this metadata is for a file.","Check if this error is temporary.","Return errorâ€™s kind.","Last modified of this entry.","Create a new layer with static dispatch.","Create a new layer with dynamic dispatch.","<code>Layer</code> is the mechanism to intercept operations.","Get current operatorâ€™s limit","Get current operatorâ€™s limit","List given path.","List current dir path.","Operate on error with map.","Get current metadata with cache.","Get current metadata with cache in blocking way.","mode represent this entryâ€™s mode.","Name of entry. Name is the last segment of path.","Name of backend, could be empty if underlying backend doesnâ€¦","Create a new operator builder.","Create a new Error with error kind and message.","Create an <code>Entry</code> with empty cached metadata.","Create a new metadata","Create a new operator with input builder.","","","","next_page can be used to fetch a new page.","next_page can be used to fetch a new page.","","Ops provides the operation args struct like <code>OpRead</code> for â€¦","Path of entry. Path is relative to operatorâ€™s root. Only â€¦","","","Writer makes sure that every write is flushed.","","","","","","","","","","Presign an operation for read.","Presign an operation for read option described in OpenDAL â€¦","Presign an operation for stat(head).","Presign an operation for write.","Presign an operation for write with option described in â€¦","","Read the specified range of path into a bytes.","Read the specified range of path into a bytes.","Create a new reader which can read the specified range.","Create a new reader which can read the specified range.","Raw modules provide raw APIs that used by underlying â€¦","","","Read the whole path into a bytes.","Read the whole path into a bytes.","Create a new reader which can read the whole path.","Create a new reader which can read the whole path.","Create a new reader with extra options","","Notes","Remove the path and all nested dirs and files recursively.","remove will given paths. remove_via will remove files via â€¦","Rename a file from <code>from</code> to <code>to</code>.","Rename a file from <code>from</code> to <code>to</code>.","Root of operator, will be in format like <code>/path/to/dir/</code>","List dir in flat way.","List dir in flat way.","<code>Scheme</code> of operator.","","","Services will provide builders to build underlying â€¦","Set Content-Disposition of this entry","Set content length of this entry.","Set content MD5 of this entry.","Set Content Range of this entry.","Set Content Type of this entry.","Set ETag of this entry.","Set Last modified of this entry.","Set mode for entry.","Set permanent status for error.","Set persistent status for error.","Set source for error.","Set temporary status for error.","","","Get current pathâ€™s metadata <strong>without cache</strong> directly.","Get current pathâ€™s metadata <strong>without cache</strong> directly.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set Content-Disposition of this entry","Set content length of this entry.","Set content MD5 of this entry.","Set Content Range of this entry.","Set Content Type of this entry.","Add more context in error.","Set ETag of this entry.","Set Last modified of this entry.","Specify the batch limit.","Specify the batch limit.","Set mode for entry.","Update errorâ€™s operation.","","","Write bytes into path.","Write bytes into given path.","Write data with extra options.","Write data with option described in OpenDAL rfc-0661","Write multiple bytes into path.","Write multiple bytes into given path.","Write multiple bytes into path with extra options.","Changes log for all OpenDAL released versions.","Compare opendal with other projects to find out the â€¦","The core concepts of OpenDALâ€™s public API.","All features that provided by OpenDAL.","The internal implement details of OpenDAL.","RFCs power OpenDALâ€™s development.","Upgrade and migrate procedures while OpenDAL meets â€¦","OpenDAL vs object_store","The internal implementation details of <code>Accessor</code>.","The internal implementation details of <code>Layer</code>.","Proposal Name: (fill me in with a unique ident, â€¦","Proposal Name: <code>object_native_api</code>Start Date: 2022-02-18RFC â€¦","Proposal Name: <code>error_handle</code>Start Date: 2022-02-23RFC PR: â€¦","Proposal Name: <code>auto_region</code>Start Date: 2022-02-24RFC PR: â€¦","Proposal Name: <code>object_stream</code>Start Date: 2022-02-25RFC PR: â€¦","Proposal Name: <code>limited_reader</code>Start Date: 2022-03-02RFC PR: â€¦","Proposal Name: <code>path-normalization</code>Start Date: 2022-03-08RFC â€¦","Proposal Name: <code>async_streaming_io</code>Start Date: 2022-03-28RFC â€¦","Proposal Name: <code>remove_credential</code>Start Date: 2022-04-02RFC â€¦","Proposal Name: <code>create-dir</code>Start Date: 2022-04-06RFC PR: â€¦","Proposal Name: <code>retryable_error</code>Start Date: 2022-04-12RFC â€¦","Proposal Name: <code>object_id</code>Start Date: 2022-05-27RFC PR: â€¦","Proposal Name: <code>dir_entry</code>Start Date: 2022-06-08RFC PR: â€¦","Proposal Name: <code>accessor_capabilities</code>Start Date: 2022-06-29â€¦","Proposal Name: <code>presign</code>Start Date: 2022-06-30RFC PR: â€¦","Proposal Name: <code>command_line_interface</code>Start Date: 2022-07-08â€¦","Proposal Name: <code>init_from_iter</code>Start Date: 2022-07-10RFC PR: â€¦","Proposal Name: <code>multipart</code>Start Date: 2022-07-11RFC PR: â€¦","Proposal Name: <code>gateway</code>Start Date: 2022-07-18RFC PR: â€¦","Proposal Name: <code>new_builder</code>Start Date: 2022-08-03RFC PR: â€¦","Proposal Name: <code>write_refactor</code>Start Date: 2022-08-22RFC PR: â€¦","Proposal Name: <code>list_metadata_reuse</code>Start Date: 2022-08-23â€¦","Proposal Name: <code>blocking_api</code>Start Date: 2022-08-30RFC PR: â€¦","Proposal Name: <code>redis_service</code>Start Date: 2022-08-31RFC PR: â€¦","Proposal Name: <code>split-capabilities</code>Start Date: 2022-09-04RFC â€¦","Proposal Name: <code>path_in_accessor</code>Start Date: 2022-09-12RFC â€¦","Proposal Name: <code>generic-kv-services</code>Start Date: 2022-10-03â€¦","Proposal Name: <code>object_reader</code>Start Date: 2022-11-13RFC PR: â€¦","Proposal Name: <code>refactor-error</code>Start Date: 2022-11-21RFC PR: â€¦","Proposal Name: <code>object_handler</code>Start Date: 2022-12-19RFC PR: â€¦","Proposal Name: <code>object_metadataer</code>Start Date: 2023-02-21RFC â€¦","Proposal Name: <code>query_based_metadata</code>Start Date: 2022-02-22â€¦","Proposal Name: <code>object_writer</code>Start Date: 2023-02-27RFC PR: â€¦","Proposal Name: <code>remove_object_concept</code>Start Date: <code>2023-03-05</code>â€¦","Proposal Name: <code>operation_extension</code>Start Date: 2023-03-23â€¦","Inject chaos into underlying services for robustness test.","Add concurrent request limit.","Add an immutable in-memory index for underlying storage â€¦","Add log for every operations.","Add metrics for every operations.","Add minitrace for every operations.","Add retry for temporary failed operations.","Add tracing for every operations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Insert keys from iter.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Insert a key into index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new ConcurrentLimitLayer will specify permits","Create a new chaos layer with specified error ratio.","Create a new retry layer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Setting the log level while expected error happened.","Set factor of current backoff.","Setting the log level while unexpected failure happened.","Set jitter of current backoff.","Set max_delay of current backoff.","Set max_times of current backoff.","Set min_delay of current backoff.","Batch operation used for batch.","Batch delete operation.","Args for <code>batch</code> operation.","Args for <code>copy</code> operation.","Args for <code>create</code> operation.","Args for <code>delete</code> operation.","Args for <code>list</code> operation.","Args for <code>presign</code> operation.","Args for <code>read</code> operation.","Args for <code>rename</code> operation.","Args for <code>scan</code> operation.","Args for <code>stat</code> operation.","Args for <code>write</code> operation.","Presign operation used for presign.","Presign a read operation.","Presign a stat(head) operation.","Presign a write operation.","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the cache control from option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the content disposition from option","Get the content type from option","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get expire from op.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get If-None-Match from option","Get If-None-Match from option","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume OpBatch into BatchOperation","Get the limit of list operation.","Get the limit of list operation.","Get mode from option.","Create a new <code>OpCreate</code>.","Create a new <code>OpDelete</code>.","Create a new <code>OpList</code>.","Create a new <code>OpList</code>.","Create a new <code>OpPresign</code>.","Create a new batch options.","Create a default <code>OpRead</code> which will read whole content of â€¦","Create a new <code>OpStat</code>.","Create a new <code>OpWrite</code>.","Create a new <code>OpCopy</code>.","Create a new <code>OpMove</code>.","Get operation from op.","Get operation from op.","Return the operation of this batch.","Returns the cache-control header that should be send back â€¦","Returns the content-disposition header that should be send â€¦","Get range from OpRead.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set the content type of option","Set the content disposition of option","Set the content type of option","Set the If-None-Match of the option","Set the If-None-Match of the option","Change the limit of this list operation.","Change the limit of this list operation.","Sets the cache-control header that should be send back by â€¦","Sets the content-disposition header that should be send â€¦","Create a new OpRead with range.","Underlying trait of all backends for implementors.","AccessorCapability describes accessorâ€™s advanced â€¦","AccessorHint describes accessorâ€™s hint.","Metadata for accessor, users can use this metadata to get â€¦","Body used in async HTTP requests.","Add this capability if service supports <code>batch</code>","Operation for <code>crate::raw::Accessor::batch</code>","Batch results of <code>batch</code> operations.","Add this capability if service supports <code>blocking</code>","Operation for <code>crate::raw::Accessor::blocking_copy</code>","Operation for <code>crate::raw::Accessor::blocking_create</code>","Operation for <code>crate::raw::Accessor::blocking_delete</code>","Operation for <code>crate::raw::Accessor::blocking_list</code>","Operation for <code>crate::raw::Accessor::blocking_rename</code>","BlockingPager is the associated pager that could return in â€¦","","Operation for <code>crate::raw::Accessor::blocking_read</code>","BlockingReader is the associated reader that could return â€¦","","Operation for <code>crate::raw::Accessor::blocking_scan</code>","Operation for <code>crate::raw::Accessor::blocking_stat</code>","Operation for <code>crate::raw::Accessor::blocking_write</code>","BlockingWriter is the associated writer the could return in","","Body with bytes.","BytesContentRange is the content range of bytes.","BytesRange(offset, size) carries a range of content.","Add this capability if service supports <code>copy</code>","Operation for <code>crate::raw::Accessor::copy</code>","Operation for <code>crate::raw::Accessor::create</code>","results of <code>delete batch</code> operation","Operation for <code>crate::raw::Accessor::delete</code>","An empty body.","ErrorResponse carries HTTP status code, headers and body.","FusedAccessor is the type erased accessor with â€¦","HttpClient that used across opendal.","IncomingAsyncBody carries the content returned by remote â€¦","Operation for <code>crate::raw::Accessor::info</code>","","Layer is used to intercept the operations on the â€¦","LayeredAccessor is layered accessor that forward all not â€¦","The layered accessor that returned by this layer.","Add this capability if service supports <code>list</code>","Operation for <code>crate::raw::Accessor::list</code>","Body with a multipart field.","Operation is the name for APIs in <code>Accessor</code>.","Pager is the associated page that return in <code>list</code> or <code>scan</code> â€¦","","Add this capability if service supports <code>presign</code>","Operation for <code>crate::raw::Accessor::presign</code>","PresignedRequest is a presigned request return by <code>presign</code>.","Add this capability if service supports <code>read</code> and <code>stat</code>","Operation for <code>crate::raw::Accessor::read</code>","Read seekable means the underlying read is seekable.","Read streamable means the underlying read is streamable.","Reader is the associated reader the could return in <code>read</code> â€¦","","Add this capability if service supports <code>rename</code>","Operation for <code>crate::raw::Accessor::rename</code>","Reply for <code>batch</code> operation.","Reply for <code>copy</code> operation.","Reply for <code>create</code> operation","Reply for <code>delete</code> operation","Reply for <code>list</code> operation.","Reply for <code>presign</code> operation.","Reply for <code>read</code> operation.","Reply for <code>rename</code> operation.","Reply for <code>scan</code> operation.","Reply for <code>stat</code> operation.","Reply for <code>write</code> operation.","Add this capability if service supports <code>scan</code>","Operation for <code>crate::raw::Accessor::scan</code>","Operation for <code>crate::raw::Accessor::stat</code>","VERSION is the compiled version of OpenDAL.","Add this capability if service supports <code>write</code> and <code>delete</code>","Operation for <code>crate::raw::Accessor::write</code>","Reader is the associated writer the could return in <code>write</code> â€¦","","Providing adapters and its implementations.","apply_on_bytes will apply range on bytes.","Invoke the <code>batch</code> operations.","Invoke the <code>batch</code> operations.","","","","","","","","","Invoke the <code>blocking_copy</code> operation on the specified <code>from</code> â€¦","Invoke the <code>blocking_copy</code> operation on the specified <code>from</code> â€¦","","","Invoke the <code>blocking_create</code> operation on the specified path.","Invoke the <code>blocking_create</code> operation on the specified path.","","","Invoke the <code>blocking_delete</code> operation on the specified path.","Invoke the <code>blocking_delete</code> operation on the specified path.","","","","Invoke the <code>blocking_list</code> operation on the specified path.","Invoke the <code>blocking_list</code> operation on the specified path.","","Invoke the <code>blocking_read</code> operation on the specified path.","Invoke the <code>blocking_read</code> operation on the specified path.","Invoke the <code>blocking_rename</code> operation on the specified <code>from</code> â€¦","Invoke the <code>blocking_rename</code> operation on the specified <code>from</code> â€¦","","","","Invoke the <code>blocking_scan</code> operation on the specified path.","Invoke the <code>blocking_scan</code> operation on the specified path.","Invoke the <code>blocking_stat</code> operation on the specified path.","Invoke the <code>blocking_stat</code> operation on the specified path.","","","","Invoke the <code>blocking_write</code> operation on the specified path.","Invoke the <code>blocking_write</code> operation on the specified path.","Get http error response body content (in bytes).","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Build a new http client in async context.","build_abs_path will build an absolute path with root.","Build header value from given string.","build_rel_path will build a relative path towards root.","build_rooted_abs_path will build an absolute path with â€¦","Consume the response to bytes.","Get backendâ€™s capabilities.","Get the async client from http client.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Consume the entire body.","Invoke the <code>copy</code> operation on the specified <code>from</code> path and <code>to</code>â€¦","Invoke the <code>copy</code> operation on the specified <code>from</code> path and <code>to</code>â€¦","","","Invoke the <code>create</code> operation on the specified path","Invoke the <code>create</code> operation on the specified path","","","","","","","","","","","","","","","Invoke the <code>delete</code> operation on the specified path.","Invoke the <code>delete</code> operation on the specified path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","format authorization header by basic auth.","format authorization header by bearer token.","format content md5 header by given input.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calculate bytes content range from size and specified â€¦","","","Get basename from path.","","Get parent from path.","","Return requestâ€™s header.","Get http headers","Get backendâ€™s hints.","Invoke the <code>info</code> operation to get metadata of accessor.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consume reply to get the meta.","Consume RpStat to get the inner metadata.","Consume reply to build a presigned request.","Consume RpBatch to get the batched results.","Convert self into static str.","Check if this range is full of this content.","Intercept the operations on the underlying storage.","Get the length that specified by this BytesContentRange, â€¦","","Invoke the <code>list</code> operation on the specified path.","Invoke the <code>list</code> operation on the specified path.","Operate on inner metadata.","","","Get a ref of metadata.","Return requestâ€™s method.","Name of backend, could be empty if underlying backend doesnâ€¦","Create a new RpBatch.","Construct a new incoming async body","Create a new reply for <code>presign</code>.","Create a new PresignedRequest","Create a new reply for <code>read</code>.","Create a new reply for <code>stat</code>.","Create a new reply for <code>write</code>.","Create a new reply for <code>copy</code>.","Create a new reply for <code>rename</code>.","Create a new http client in async context.","Create a new <code>BytesRange</code>","Parse json deserialize error into opendal::Error.","Parse json serialize error into opendal::Error.","Create a new error happened during building request.","Create a new error happened during signing request.","Create a new error happened during signing request.","Parse xml deserialize error into opendal::Error.","Make sure all operation are constructed by normalized path:","Make sure root is normalized to style like <code>/abc/def/</code>.","","","Get offset of BytesRange.","<code>oio</code> provides OpenDALâ€™s raw traits and types that opendal â€¦","Parse Content-Disposition for header map","Parse content length from header map.","Parse content md5 from header map.","Parse content range from header map.","Parse content type from header map.","parse datetime from given timestamp_millis","Parse dateimt from rfc2822.","Parse dateimt from rfc3339.","parse_error_response will parse response into <code>ErrorResponse</code>â€¦","Parse etag from header map.","parse_into_metadata will parse standards http headers into â€¦","Parse last modified from header map.","Parse redirect location from header map","percent_encode_path will do percent encoding for http â€¦","","","","Invoke the <code>presign</code> operation on the specified path.","Invoke the <code>presign</code> operation on the specified path.","","","Get the range inclusive of this BytesContentRange, return â€¦","Get the range inclusive of this BytesContentRange, return â€¦","","Invoke the <code>read</code> operation on the specified path, returns a â€¦","Invoke the <code>read</code> operation on the specified path, returns a â€¦","","","Invoke the <code>rename</code> operation on the specified <code>from</code> path and â€¦","Invoke the <code>rename</code> operation on the specified <code>from</code> path and â€¦","","","Get the results from RpBatch.","Root of backend, will be in format like <code>/path/to/dir/</code>","","Invoke the <code>scan</code> operation on the specified path.","Invoke the <code>scan</code> operation on the specified path.","<code>Scheme</code> of backend.","Send a request in async way.","","Set capabilities for backend.","Set hints for backend.","Set name of this backend.","Set root for backend.","Set <code>Scheme</code> for backend.","Get size of BytesRange.","Get the size of this BytesContentRange, return <code>None</code> if â€¦","Invoke the <code>stat</code> operation on the specified path.","Invoke the <code>stat</code> operation on the specified path.","","","Get http status code","","","Calculate bytes range from bytes content range.","Convert bytes range into Range header.","Convert bytes content range into Content-Range header.","","","","","","","","","","","","","","","","","","","Convert bytes range into rust range.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Return requestâ€™s uri.","Validate given path is match with given EntryMode.","","","","","","","","","","","","","","","","","","","","","","","","Create reply read with existing metadata.","Update BytesContentRange with range.","Update BytesContentRange with size.","","Invoke the <code>write</code> operation on the specified path, returns a","Invoke the <code>write</code> operation on the specified path, returns a","Providing Key Value Adapter for OpenDAL.","KvAdapter is the adapter to underlying kv services.","Backend of kv service.","Metadata for this key value accessor.","Append a key into service","Append a key into service","Append a key into service in blocking way.","Append a key into service in blocking way.","","Delete a key from service in blocking way.","Delete a key from service in blocking way.","","The blocking version of get.","The blocking version of get.","","Scan a key prefix to get all keys that start with this key â€¦","Scan a key prefix to get all keys that start with this key â€¦","","The blocking version of set.","The blocking version of set.","","","","","","","Get the capabilities.","","","","","","","","","","Delete a key from service.","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a key from service.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the medata of this key value accessor.","Get the name.","Create a new KeyValueAccessorInfo.","Create a new kv backend.","","Scan a key prefix to get all keys that start with this key.","Scan a key prefix to get all keys that start with this key.","","Get the scheme.","Set a key into service.","","","","","","","","","","","Configure root within this backend.","","Operation for <code>Write::append</code>","Operation for <code>BlockingWrite::append</code>","Operation for <code>BlockingWrite::close</code>","Operation for <code>BlockingRead::next</code>","Operation for <code>BlockingPage::next</code>","BlockingPage is the blocking version of <code>Page</code>.","BlockingPager is a boxed <code>BlockingPage</code>","Read is the trait that OpenDAL returns to callers.","Operation for <code>BlockingRead::read</code>","BlockingReader is a boxed dyn <code>BlockingRead</code>.","Operation for <code>BlockingRead::seek</code>","BlockingWrite is the trait that OpenDAL returns to callers.","Operation for <code>BlockingWrite::write</code>","BlockingWriter is a type erased <code>BlockingWrite</code>","Operation for <code>Write::close</code>","Cursor is the cursor for <code>Bytes</code> that implements <code>oio::Read</code>","Entry is returned by <code>Page</code> or <code>BlockingPage</code> during list â€¦","Make given read streamable.","Operation for <code>Read::poll_next</code>","Operation for <code>Page::next</code>","Page trait is used by <code>crate::raw::Accessor</code> to implement â€¦","PageOperation is the name for APIs of pager.","The boxed version of <code>Page</code>","Read is the trait that OpenDAL returns to callers.","Operation for <code>Read::poll_read</code>","Extension of <code>Read</code> to make it easier for use.","PageOperation is the name for APIs of pager.","Reader is a type erased <code>Read</code>.","Operation for <code>Read::poll_seek</code>","ToFlatPager will walk dir in bottom up way:","ToHierarchyPager will convert a flat page to hierarchy by â€¦","Write is the trait that OpenDAL returns to callers.","Operation for <code>Write::write</code>","WriteOperation is the name for APIs of Writer.","Writer is a type erased <code>Write</code>","Append content at tailing.","Append bytes to the writer.","","","","","","","","","","","","","","","","","","","","","","","","","Close the writer and make sure all data has been flushed.","Close the writer and make sure all data has been flushed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","into_blocking_reader will provide different â€¦","into_reader will provide different implementations to â€¦","Convert self into static str.","Convert self into static str.","Convert self into static str.","as_streamable is used to make <code>oio::Read</code> or â€¦","Returns <code>true</code> if the remaining slice is empty.","Get entryâ€™s mode.","Create a new entry by its corresponding underlying storage.","Iterating <code>Bytes</code> from underlying reader.","Fetch a new page of <code>Entry</code>","Fetch a new page of <code>Entry</code>","Build a future for <code>poll_next</code>","Build a future for <code>poll_next</code>","","","","","","","","","","Get the path of entry.","Stream <code>Bytes</code> from underlying reader.","","","","Read bytes asynchronously.","","","","Seek asynchronously.","","","","Read synchronously.","Build a future for <code>poll_read</code>.","Build a future for <code>poll_read</code>.","","","","Returns the remaining slice.","Seek synchronously.","Build a future for <code>poll_seek</code>.","Build a future for <code>poll_seek</code>.","","","","Set mode for entry.","Set path for entry.","to_flat_pager is used to make a hierarchy pager flat.","to_hierarchy_pager is used to make a hierarchy pager flat.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create a new entry with given value.","Write whole content at once.","Write whole content at once.","FdReader is a wrapper of input fd to implement <code>oio::Read</code>.","","","","","","","","","Returns the argument unchanged.","Convert given fd into <code>oio::BlockingRead</code>.","","Calls <code>U::from(self)</code>.","","","TODO: maybe we donâ€™t need to do seek really, just call â€¦","","","","","FdReader is a wrapper of input fd to implement <code>oio::Read</code>.","RangeReader that can do seek on non-seekable reader.","","","","","Convert given reader into <code>oio::Reader</code> by range.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert given fd into <code>oio::Reader</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","TODO: maybe we donâ€™t need to do seek really, just call â€¦","","","","","","","","","Azure Storage Blob services support.","Azure Data Lake Storage Gen2 Support.","dashmap backend support.","POSIX file system support.","FTP and FTPS services support.","Google Cloud Storage service.","GitHub Action Cache Services support.","Hadoop Distributed File System (HDFSâ„¢) support.","HTTP Read-only service support like Nginx and Caddy.","IPFS file system support based on IPFS HTTP Gateway.","IPFS file system support based on IPFS MFS API.","Memcached service support.","In memory service support. (HashMap Based)","moka backend support.","Huawei Cloud OBS services support.","Aliyun Object Storage Service (OSS) support","Redis services support.","Rocksdb service support.","Aws S3 and compatible services (including minio, â€¦","Sled service support.","WebDAV backend support.","WebHDFSâ€™s REST API support.","Set access_key_id of this backend.","Set access_key_id of this backend.","Set access_key_id of this backend.","Set access_key_secret of this backend.","Set account_key of this backend.","Set account_key of this backend.","Set account_name of this backend.","Set account_name of this backend.","Set temp dir for atomic write.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","set the containerâ€™s name","Set bucket of this backend. The param is required.","Set bucket name of this backend.","Set bucket name of this backend.","","","","","","","","","","","","","","","","","","","","","","build the backend","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Set container name of this backend.","set the base64 hashed credentials string used for OAuth2","set the credentials path of GCS.","Adding a customed credential load for service.","Specify the customed token loader used by this service.","Set the path to the rocksdb data directory. Will create if â€¦","Set the path to the sled data directory. Will create if â€¦","set the db used in redis","","","","","","","","","","","","","","","","","","","","","","","Set default storage_class for this backend.","Set the default ttl for memcached services.","Set the default ttl for redis services.","Set the delegation token of this backend, used for â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Disable config load so that opendal will not load config â€¦","Disable load credential from ec2 metadata.","","","","","","","","","","","","","","","","","","","","","","","Enable create simulation for ghac service.","OpenDAL requires all input path are normalized to make â€¦","Enable virtual host style so that opendal will send API â€¦","Set endpoint of this backend.","Set endpoint of this backend.","set endpoint for ftp backend.","set the endpoint GCS service uses","Set endpoint for http backend.","Set endpoint if ipfs backend.","Set endpoint for ipfs.","set the network address of memcached service.","Set endpoint of this backend.","Set endpoint of this backend.","set the network address of redis service.","Set endpoint of this backend.","Set endpoint for http backend.","Set the remote address of this backend default to â€¦","Set external_id for this backend.","Set filesystem name of this backend.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","from_connection_string will make a builder from connection â€¦","","","","","","","","","","","","","","","","","","","","","","","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","Specify the http client that used by this service.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Sets the max capacity of the cache.","Name for this cache instance.","Set name_node of this backend.","set password for ftp backend.","set password for http backend","set the password for redis","set the password for Webdav","Set a endpoint for generating presigned urls.","Region represent the signing region of this endpoint.","Set role_arn for this backend.","Set root of this backend.","Set root of this backend.","Set the root for dashmap.","Set root for backend.","set root path for ftp backend.","set the working directory root of backend","set the working directory root of backend","Set root of this backend.","Set root path of http backend.","Set root of ipfs backend.","Set root for ipfs.","set the working directory, all operations will be â€¦","Set the root for dashmap.","Set root of this backend.","Set root of this backend.","set the working directory, all operations will be â€¦","set the working directory, all operations will be â€¦","Set root of this backend.","Set the root for sled.","Set root path of http backend.","Set the working directory of this backend","Set sas_token of this backend.","set the GCS service scope","Set secret_access_key of this backend.","Set secret_access_key of this backend.","Set temporary credential used in AWS S3 connections","Sets the segments number of the cache.","Set server_side_encryption for this backend.","Set server_side_encryption_aws_kms_key_id for this backend","Set server_side_encryption_customer_algorithm for this â€¦","Set server_side_encryption_customer_key for this backend.","Set server_side_encryption_customer_key_md5 for this â€¦","Enable server side encryption with aws managed kms key","Enable server side encryption with customer key.","Enable server side encryption with customer managed kms key","Enable server side encryption with s3 managed key","Set the GCS service account.","Decides whether to enable thread pool of the cache.","Sets the time to idle of the cache.","Sets the time to live of the cache.","","","","","","","","","set bearer token for http backend","set the bearer token for Webdav","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","set user for ftp backend.","set password for http backend","set the username for redis","set the password for Webdav","set the version that used by cache.","","","","","","","","","","","","","","","","","","","","","",""],"i":[42,15,16,16,0,0,0,0,0,6,15,6,6,6,6,6,16,12,16,0,0,0,0,6,12,16,16,16,16,16,16,16,16,15,15,6,0,16,16,0,0,6,16,15,15,16,0,0,0,16,15,15,0,16,0,16,16,42,0,16,15,12,15,16,16,0,1,5,6,6,6,8,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,42,10,10,10,10,10,10,10,10,10,8,12,13,14,6,8,9,10,15,16,12,13,14,6,8,9,10,15,16,1,5,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,14,14,14,14,14,8,9,8,9,12,10,16,8,9,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,0,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,12,14,6,15,16,12,14,6,15,16,14,24,5,26,26,12,12,13,14,6,8,9,10,15,15,16,16,48,43,1,5,40,41,24,26,26,26,26,12,13,14,6,8,9,10,15,16,42,42,8,42,42,8,42,8,16,16,16,8,9,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,43,41,15,16,12,14,8,9,12,14,26,26,14,24,8,0,8,9,8,9,26,8,9,14,13,10,24,26,13,14,8,43,43,41,40,41,6,0,13,1,48,1,48,48,40,48,48,48,48,48,1,8,8,8,8,8,26,8,9,8,9,0,43,43,8,9,8,9,8,6,8,8,8,8,9,10,8,9,10,43,43,0,14,14,14,14,14,14,14,14,26,26,26,26,26,48,8,9,6,12,13,14,6,8,9,10,15,16,26,12,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,40,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,48,43,1,5,40,41,24,26,12,13,14,6,8,9,10,15,16,14,14,14,14,14,26,14,14,8,9,14,26,5,5,8,9,8,9,8,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,64,65,66,67,68,69,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,65,66,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,65,65,66,67,68,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,65,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,64,67,69,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,70,71,64,65,66,67,68,69,66,69,66,69,69,69,69,0,82,0,0,0,0,0,0,0,0,0,0,0,0,80,80,80,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,54,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,54,54,75,76,77,78,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,79,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,80,80,80,81,82,82,53,83,54,84,85,53,83,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,81,77,78,75,75,76,77,78,79,81,53,83,54,84,85,79,81,82,53,53,53,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,75,76,77,78,79,80,81,82,53,83,54,84,85,54,54,54,53,83,77,78,53,53,53,0,0,0,0,0,90,86,0,90,86,86,86,86,86,23,172,86,23,172,86,86,86,23,172,109,0,0,90,86,86,110,86,109,0,0,0,0,86,172,0,0,38,90,86,109,0,23,172,90,86,0,90,86,91,91,23,172,90,86,0,0,0,0,0,0,0,0,0,0,0,90,86,86,0,90,86,23,172,0,87,23,23,172,172,90,91,90,91,90,91,23,23,172,172,23,23,172,172,23,23,172,172,172,23,23,172,23,23,23,23,172,172,172,23,23,23,23,172,172,172,23,23,97,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,99,0,0,0,0,101,102,99,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,87,21,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,101,23,23,172,172,23,23,172,172,102,86,93,94,104,105,108,92,95,109,87,21,23,23,172,172,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,90,91,86,87,21,90,91,86,87,21,97,102,90,91,86,86,93,94,104,105,106,52,107,96,108,92,95,99,87,87,21,21,0,0,0,113,110,110,101,97,102,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,87,21,21,87,21,0,86,0,86,52,97,102,23,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,172,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,107,96,106,113,86,87,38,21,172,23,23,96,172,172,107,52,102,113,101,106,52,107,96,108,92,95,99,87,0,0,0,0,0,0,0,0,90,91,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,101,101,23,23,172,172,21,21,172,23,23,90,91,23,23,172,172,113,102,172,23,23,102,99,21,102,102,102,102,102,87,21,23,23,172,172,97,90,91,21,87,21,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,87,21,87,97,86,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,52,0,113,110,101,97,102,90,91,86,93,94,104,105,106,52,107,96,108,92,95,99,109,87,21,107,21,21,172,23,23,0,0,0,0,126,126,126,126,127,126,126,127,126,126,127,126,126,127,126,126,127,127,111,127,111,127,111,127,127,111,127,111,127,111,127,127,126,127,111,127,111,127,111,127,127,111,127,126,127,111,127,111,127,126,111,111,127,127,126,126,127,111,126,127,127,111,127,111,127,111,127,111,127,127,127,131,131,131,130,133,0,0,0,130,0,130,0,131,0,131,0,0,0,130,133,0,0,0,0,130,0,0,0,130,0,0,0,131,0,0,173,174,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,130,131,132,133,130,131,132,133,173,174,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,130,131,132,133,130,131,132,133,130,130,131,131,132,133,133,134,134,135,139,141,130,131,132,133,130,131,133,130,131,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,0,0,130,131,133,0,134,132,132,136,140,142,175,175,136,134,135,137,138,139,139,141,141,132,143,143,134,135,143,143,134,135,143,143,134,135,136,175,175,136,134,135,134,136,175,175,136,134,135,132,132,0,0,130,131,132,133,130,131,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,134,135,139,141,130,131,132,133,132,173,174,0,144,144,144,144,144,144,144,144,144,0,144,144,144,144,144,144,144,144,144,0,0,146,147,146,147,0,146,147,146,147,146,147,146,147,146,147,146,147,146,147,0,146,147,146,147,146,147,146,147,146,147,146,147,146,147,146,147,146,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,149,150,149,151,152,151,152,153,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,154,148,149,150,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,160,162,148,165,166,169,151,152,160,162,148,165,166,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,154,154,150,154,166,167,165,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,150,162,165,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,150,150,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,157,153,150,151,152,156,154,159,160,161,162,148,149,165,150,168,169,150,152,151,152,153,156,154,157,158,159,160,161,164,148,149,165,166,150,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,154,157,159,160,161,148,149,150,168,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,164,164,158,156,159,165,168,149,150,150,151,152,155,153,156,154,157,158,159,160,161,162,163,148,149,165,166,150,167,168,169,151,154,148,150,150,164,150,150,150,150,150,150,150,150,150,154,164,164,164,151,152,160,162,148,165,166,169,159,168,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169,156,159,165,168,157,151,152,155,153,156,154,157,158,159,160,161,162,163,164,148,149,165,166,150,167,168,169],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[3,[2]]],4],[[5,[3,[2]]],4],[[6,[3,[[7,[6]]]]]],[[6,[3,[[7,[6]]]]]],[[6,[3,[[7,[6]]]]]],[8,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[10,11],[10,11],[10,11],[10,11],[10,11],[10,11],[10,11],[10,11],[10,11],[8,4],[12,12],[13,13],[14,14],[6,6],[8,8],[9,9],[10,10],[15,15],[16,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,4],[5,4],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[14,[[19,[18]]]],[14,20],[14,[[19,[18]]]],[14,[[19,[21]]]],[14,[[19,[18]]]],[[8,18,18],4],[[9,18,18],4],[[8,18],4],[[9,18],4],[[],12],[[],10],[[],16],[[8,18],4],[[9,18],4],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],0,[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[12,12],11],[[14,14],11],[[6,6],11],[[15,15],11],[[16,16],11],[[],11],[[],11],[[],11],[[],11],[[],11],[14,[[19,[18]]]],[[[24,[23]]],8],[5,25],[[26,27],28],[[26,27],28],[[12,27],28],[[12,27],28],[[13,27],28],[[14,27],28],[[6,27],28],[[8,27],28],[[9,27],28],[[10,27],28],[[15,27],28],[[15,27],28],[[16,27],28],[[16,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,26],[[]],[30,26],[31,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[4,[[24,[23]]]]]],[32],[32],[32,[[4,[[24,[23]]]]]],[[[34,[33,33]]]],[[[34,[33,33]]],[[4,[[24,[23]]]]]],[18,[[35,[16]]]],[[],20],[16],[8,10],[9,10],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[15,18],[16,18],[12,11],[14,11],[[8,18],[[4,[11]]]],[[9,18],[[4,[11]]]],[12,11],[14,11],[26,11],[26,15],[14,[[19,[[37,[36]]]]]],[[[24,[23]],[38,[23]]],24],[[8,[38,[39]]],8],0,[8,22],[9,22],[[8,18],[[4,[40]]]],[[9,18],[[4,[41]]]],[26,26],[[8,13,[3,[[7,[6]]]]],[[4,[14]]]],[[9,13,[3,[[7,[6]]]]],[[4,[14]]]],[14,12],[13,18],[10,18],[23,[[24,[23]]]],[[15,18],26],[18,13],[12,14],[42,[[4,[[24,[23]]]]]],[43,[[19,[[4,[2]]]]]],[43,19],[41,19],[40,[[4,[[19,[[44,[13]]]]]]]],[41,[[4,[[19,[[44,[13]]]]]]]],[6],0,[13,18],[[[45,[1]],46],[[47,[25]]]],[[[45,[48]],46],[[47,[[25,[20]]]]]],[[[45,[1]],46],[[47,[25]]]],[[[45,[48]],46],[[47,[19]]]],[[48,46],[[47,[[19,[[4,[2]]]]]]]],[[[45,[40]],46],[[47,[19]]]],[[48,46],[[47,[[4,[22]]]]]],[[[45,[48]],46],[[47,[[25,[22]]]]]],[[[45,[48]],46,49],[[47,[25]]]],[[48,46,50],[[47,[[4,[20]]]]]],[[[45,[48]],46,50],[[47,[[25,[20]]]]]],[[[45,[1]],46],[[47,[[25,[22]]]]]],[[8,18,51],[[4,[52]]]],[[8,18,53,51],[[4,[52]]]],[[8,18,51],[[4,[52]]]],[[8,18,51],[[4,[52]]]],[[8,18,54,51],[[4,[52]]]],[55],[[8,18,[56,[20]]],[[4,[[44,[57]]]]]],[[9,18,[56,[20]]],[[4,[[44,[57]]]]]],[[8,18,[56,[20]]],[[4,[48]]]],[[9,18,[56,[20]]],[[4,[43]]]],0,[43,[[25,[22]]]],[43,[[4,[22]]]],[[8,18],[[4,[[44,[57]]]]]],[[9,18],[[4,[[44,[57]]]]]],[[8,18],[[4,[48]]]],[[9,18],[[4,[43]]]],[[8,18,53],[[4,[48]]]],[[6,[3,[[7,[6]]]]]],[[8,[44,[33]]],4],[[8,18],4],[[8,[0,[58,59]]],4],[[8,18,18],4],[[9,18,18],4],[10,18],[[8,18],[[4,[40]]]],[[9,18],[[4,[41]]]],[10,16],[[43,50],[[25,[20]]]],[[43,50],[[4,[20]]]],0,[[14,18],14],[[14,20],14],[[14,18],14],[[14,21],14],[[14,18],14],[[14,18],14],[[14,[37,[36]]],14],[[14,12],14],[26,26],[26,26],[[26,[3,[60]]],26],[26,26],[26,[[19,[61]]]],[[[45,[48]],50],25],[[8,18],[[4,[14]]]],[[9,18],[[4,[14]]]],[[6,[3,[[7,[6]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],33],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[45,46],[[47,[[19,[35]]]]]],[[45,46],[[47,[[19,[35]]]]]],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,33],14],[[14,20],14],[[14,33],14],[[14,21],14],[[14,33],14],[[26,18,[3,[33]]],26],[[14,33],14],[[14,[37,[36]]],14],[[8,22],8],[[9,22],9],[[14,12],14],[[26,[3,[18]]],26],[5,[[25,[22]]]],[[],[[35,[63]]]],[[8,18,[3,[2]]],4],[[9,18,[3,[2]]],4],[[8,18,54,[3,[2]]],4],[[9,18,54,[3,[2]]],4],[[8,18],[[4,[1]]]],[[9,18],[[4,[5]]]],[[8,18,54],[[4,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[64,64],[65,65],[66,66],[67,67],[68,68],[69,69],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],65],[[],66],[[],69],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[65],[[65,27],28],[[66,27],28],[[67,27],28],[[68,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[65,33]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[70,23]],[[71,23]],[[64,23]],[[65,23]],[[66,23]],[[67,23]],[[68,23]],[[69,23]],[22,64],[72,67],[[],69],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[66,[19,[73]]],66],[[69,74],69],[[66,[19,[73]]],66],[69,69],[[69,51],69],[[69,22],69],[[69,51],69],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,[[19,[18]]]],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[53,53],[83,83],[54,54],[84,84],[85,85],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[54,[[19,[18]]]],[54,[[19,[18]]]],[[],75],[[],76],[[],77],[[],78],[[],53],[[],83],[[],54],[[],84],[[],85],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[79,51],[[75,27],28],[[76,27],28],[[77,27],28],[[78,27],28],[[79,27],28],[[80,27],28],[[81,27],28],[[82,27],28],[[53,27],28],[[83,27],28],[[54,27],28],[[84,27],28],[[85,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[54,80],[53,80],[83,80],[[]],[[]],[76,82],[[]],[[]],[[]],[[]],[[]],[53,[[19,[18]]]],[83,[[19,[18]]]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[81,44],[77,[[19,[22]]]],[78,[[19,[22]]]],[75,12],[12,75],[[],76],[[],77],[[],78],[[[3,[80]],51],79],[44,81],[[],53],[[],83],[[],54],[[],84],[[],85],[79,80],[81],[82,86],[53,[[19,[18]]]],[53,[[19,[18]]]],[53,87],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[54,18],54],[[54,18],54],[[54,18],54],[[53,18],53],[[83,18],83],[[77,22],77],[[78,22],78],[[53,18],53],[[53,18],53],[[53,87],53],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[87,2],2],[81,[[45,[[89,[88]]]]]],[81,[[45,[[89,[88]]]]]],[81,[[45,[[89,[88]]]]]],[81,[[45,[[89,[88]]]]]],[[90,[3,[[7,[90]]]]]],[[91,[3,[[7,[91]]]]]],[[90,[3,[[7,[90]]]]]],[[91,[3,[[7,[91]]]]]],[[90,[3,[[7,[90]]]]]],[[91,[3,[[7,[91]]]]]],[[18,18,84],[[4,[92]]]],[[18,18,84],[[4,[92]]]],[[18,18,84],[[4,[92]]]],[[18,18,84],[[4,[92]]]],[[18,75],[[4,[93]]]],[[18,75],[[4,[93]]]],[[18,75],[[4,[93]]]],[[18,75],[[4,[93]]]],[[18,76],[[4,[94]]]],[[18,76],[[4,[94]]]],[[18,76],[[4,[94]]]],[[18,76],[[4,[94]]]],[[18,77],4],[[18,77],4],[[18,77],4],[[18,53],4],[[18,53],4],[[18,53],4],[[18,18,85],[[4,[95]]]],[[18,18,85],[[4,[95]]]],[[18,18,85],[[4,[95]]]],[[18,18,85],[[4,[95]]]],[[18,78],4],[[18,78],4],[[18,78],4],[[18,83],[[4,[96]]]],[[18,83],[[4,[96]]]],[[18,83],[[4,[96]]]],[[18,83],[[4,[96]]]],[[18,54],4],[[18,54],4],[[18,54],4],[97],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[98,[[4,[99]]]],[[18,18],33],[18,[[4,[100]]]],[[18,18],33],[[18,18],33],[101,[[4,[2]]]],[102,[[7,[90]]]],[99,103],[102,102],[90,90],[91,91],[86,86],[93,93],[94,94],[104,104],[105,105],[106,106],[52,52],[107,107],[96,96],[108,108],[92,92],[95,95],[99,99],[87,87],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[101,4],[[18,18,84],[[45,[[89,[88]]]]]],[[18,18,84],[[45,[[89,[88]]]]]],[[18,18,84],[[45,[[89,[88]]]]]],[[18,18,84],[[45,[[89,[88]]]]]],[[18,75],[[45,[[89,[88]]]]]],[[18,75],[[45,[[89,[88]]]]]],[[18,75],[[45,[[89,[88]]]]]],[[18,75],[[45,[[89,[88]]]]]],[[],102],[[],86],[[],93],[[],94],[[],104],[[],105],[[],108],[[],92],[[],95],[[],109],[[],87],[[],21],[[18,76],[[45,[[89,[88]]]]]],[[18,76],[[45,[[89,[88]]]]]],[[18,76],[[45,[[89,[88]]]]]],[[18,76],[[45,[[89,[88]]]]]],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[],[[35,[21]]]],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[90,90],11],[[91,91],11],[[86,86],11],[[87,87],11],[[21,21],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[97,27],28],[[102,27],28],[[90,27],28],[[91,27],28],[[86,27],28],[[86,27],28],[[93,27],28],[[94,27],28],[[104,27],28],[[105,27],28],[[106,27],28],[[52,27],28],[[107,27],28],[[96,27],28],[[108,27],28],[[92,27],28],[[95,27],28],[[99,27],28],[[87,27],28],[[87,27],28],[[21,27],28],[[21,27],28],[[18,18],[[4,[33]]]],[18,[[4,[33]]]],[[],33],[[]],[94,110],[[]],[[]],[[]],[111,102],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],87],[[]],[[]],[[20,87],21],[18,[[4,[87]]]],[18,[[4,[21]]]],[18,18],[[],20],[18,18],[86],[52,112],[97,112],[102,[[7,[91]]]],[[],102],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[107,14],[96,14],[106,52],[113,44],[86,18],[87,11],[[]],[21,[[19,[20]]]],[[18,77],[[45,[[89,[88]]]]]],[[18,77],[[45,[[89,[88]]]]]],[[18,77],[[45,[[89,[88]]]]]],[[96,114],96],[[],102],[[],102],[107,14],[52,115],[102,18],[44,113],[[[89,[58]],[19,[20]]],101],[52,106],[[115,116,112],52],[20,107],[14,96],[[],108],[[],92],[[],95],[[],[[4,[99]]]],[[[19,[20]],[19,[20]]],87],[117,26],[117,26],[118,26],[60,26],[60,26],[119,26],[18,33],[18,33],[90],[91],[87,[[19,[20]]]],0,[112,[[4,[[19,[18]]]]]],[112,[[4,[[19,[20]]]]]],[112,[[4,[[19,[18]]]]]],[112,[[4,[[19,[21]]]]]],[112,[[4,[[19,[18]]]]]],[120,[[4,[[37,[36]]]]]],[18,[[4,[[37,[36]]]]]],[18,[[4,[[37,[36]]]]]],[[[121,[101]]],[[4,[97]]]],[112,[[4,[[19,[18]]]]]],[[18,112],[[4,[14]]]],[112,[[4,[[19,[[37,[36]]]]]]]],[112,[[4,[[19,[18]]]]]],[18,33],[[101,46],[[47,[[19,[[4,[2]]]]]]]],[[101,46],[[47,[[4,[22]]]]]],[[101,46,50],[[47,[[4,[20]]]]]],[[18,79],[[45,[[89,[88]]]]]],[[18,79],[[45,[[89,[88]]]]]],[[18,79],[[45,[[89,[88]]]]]],[[18,79],[[45,[[89,[88]]]]]],[21,[[19,[[122,[20]]]]]],[21,[[19,[[123,[20]]]]]],[[18,53],[[45,[[89,[88]]]]]],[[18,53],[[45,[[89,[88]]]]]],[[18,53],[[45,[[89,[88]]]]]],[[90,[3,[[7,[90]]]]]],[[91,[3,[[7,[91]]]]]],[[18,18,85],[[45,[[89,[88]]]]]],[[18,18,85],[[45,[[89,[88]]]]]],[[18,18,85],[[45,[[89,[88]]]]]],[[18,18,85],[[45,[[89,[88]]]]]],[113],[102,18],[[18,78],[[45,[[89,[88]]]]]],[[18,78],[[45,[[89,[88]]]]]],[[18,78],[[45,[[89,[88]]]]]],[102,16],[[99,[124,[109]]],[[4,[[121,[101]]]]]],[21,35],[[102,[3,[[7,[90]]]]],102],[[102,[3,[[7,[91]]]]],102],[[102,18],102],[[102,18],102],[[102,16],102],[87,[[19,[20]]]],[21,[[19,[20]]]],[[18,83],[[45,[[89,[88]]]]]],[[18,83],[[45,[[89,[88]]]]]],[[18,83],[[45,[[89,[88]]]]]],[[18,83],[[45,[[89,[88]]]]]],[97,125],[[90,[3,[[7,[90]]]]]],[[91,[3,[[7,[91]]]]]],[21,[[19,[87]]]],[87,33],[21,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[87,[[56,[20]]]],[[],33],[[],33],[[],33],[[],33],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[52,116],[[18,12],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,107],[[21,20,20],21],[[21,20],21],[[18,54],[[45,[[89,[88]]]]]],[[18,54],[[45,[[89,[88]]]]]],[[18,54],[[45,[[89,[88]]]]]],0,0,0,0,[18,[[45,[[89,[88]]]]]],[18,[[45,[[89,[88]]]]]],[18,4],[18,4],[[[127,[126]],18,75],[[4,[93]]]],[18,4],[18,4],[[[127,[126]],18,76],[[4,[94]]]],[18,[[4,[[19,[[44,[57]]]]]]]],[18,[[4,[[19,[[44,[57]]]]]]]],[[[127,[126]],18,53],4],[18,[[4,[[44,[33]]]]]],[18,[[4,[[44,[33]]]]]],[[[127,[126]],18,78],4],[18,4],[18,4],[[[127,[126]],18,83],[[4,[96]]]],[[[127,[126]],18,54],4],[[]],[[]],[[]],[[]],[111,[[7,[90]]]],[[[127,[[0,[128,126]]]]],[[127,[[0,[128,126]]]]]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[127,[126]],18,75],[[45,[[89,[88]]]]]],[18,[[45,[[89,[88]]]]]],[[[127,[126]],18,76],[[45,[[89,[88]]]]]],[22],[22],[22],[22],[22],[22],[[[127,[[0,[129,126]]]],27],28],[[]],[[]],[18,[[45,[[89,[88]]]]]],[[[127,[126]]],102],[[],22],[[],22],[[]],[[]],[[],111],[111,18],[[16,18,[3,[[7,[90]]]]],111],[[],127],[[[127,[126]],18,53],[[45,[[89,[88]]]]]],[18,[[45,[[89,[88]]]]]],[18,[[45,[[89,[88]]]]]],[[[127,[126]],18,78],[[45,[[89,[88]]]]]],[111,16],[18,[[45,[[89,[88]]]]]],[[[127,[126]],18,83],[[45,[[89,[88]]]]]],[[]],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[]],[[]],[[127,18],127],[[[127,[126]],18,54],[[45,[[89,[88]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2,4],[2,[[45,[[89,[88]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[130,130],[131,131],[132,132],[133,133],[[]],[[]],[[]],[[]],[[],4],[[],[[45,[[89,[88]]]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[[130,130],11],[[131,131],11],[[132,132],11],[[133,133],11],[[],11],[[],11],[[],11],[[],11],[[130,27],28],[[130,27],28],[[131,27],28],[[131,27],28],[[132,27],28],[[133,27],28],[[133,27],28],[[[44,[57]]],134],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[130],[131],[133],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[130,18],[131,18],[133,18],[22,135],[134,11],[132,12],[[18,14],132],[[],[[19,[[4,[2]]]]]],[[],[[4,[[19,[[44,[132]]]]]]]],[[],[[45,[[89,[88]]]]]],0,0,[136,19],[134,[[19,[[4,[2]]]]]],[[[135,[136]]],[[19,[[4,[2]]]]]],[137,[[45,[[89,[88]]]]]],[138,[[4,[[19,[[44,[132]]]]]]]],[139,[[4,[[19,[[44,[132]]]]]]]],[139,[[45,[[89,[88]]]]]],[[[141,[140]]],[[4,[[19,[[44,[132]]]]]]]],[[[141,[142]]],[[45,[[89,[88]]]]]],[132,18],[46,[[47,[[19,[[4,[2]]]]]]]],[[[45,[143]],46],[[47,[19]]]],[[134,46],[[47,[[19,[[4,[2]]]]]]]],[[[135,[143]],46],[[47,[[19,[[4,[2]]]]]]]],[46,[[47,[[4,[22]]]]]],[[[45,[143]],46],[[47,[[25,[22]]]]]],[[134,46],[[47,[[4,[22]]]]]],[[[135,[143]],46],[[47,[[4,[22]]]]]],[[46,50],[[47,[[4,[20]]]]]],[[[45,[143]],46,50],[[47,[[25,[20]]]]]],[[134,46,50],[[47,[[4,[20]]]]]],[[[135,[143]],46,50],[[47,[[4,[20]]]]]],[[],[[4,[22]]]],0,0,[136,[[25,[22]]]],[134,[[4,[22]]]],[[[135,[136]]],[[4,[22]]]],[134],[50,[[4,[20]]]],0,0,[[136,50],[[25,[20]]]],[[134,50],[[4,[20]]]],[[[135,[136]],50],[[4,[20]]]],[[132,12],132],[[132,18],132],[[23,18,22],[[139,[23]]]],[18,141],[[]],[[]],[[]],[[]],[[],33],[[],33],[[],33],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[33,14],132],[2,4],[2,[[45,[[89,[88]]]]]],0,[[]],[[]],[[],17],[[],17],[[],17],[22],[22],[22],[[]],[[20,20],144],[[],22],[[]],[144,[[19,[[4,[2]]]]]],[144,[[4,[22]]]],[[144,50],[[4,[20]]]],[[],35],[[],35],[[],62],[[]],0,0,[[]],[[]],[[]],[[]],[[[145,[23]],18,20,20],[[146,[23]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[22],[22],[22],[22],[22],[22],[[]],[[]],[[20,20],147],[[],22],[[],22],[[]],[[]],[[[146,[23]],46],[[47,[[19,[[4,[2]]]]]]]],[[147,46],[[47,[[19,[[4,[2]]]]]]]],[[[146,[23]],46],[[47,[[4,[22]]]]]],[[147,46],[[47,[[4,[22]]]]]],[[[146,[23]],46,50],[[47,[[4,[20]]]]]],[[147,46,50],[[47,[[4,[20]]]]]],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[148,18],148],[[149,18],149],[[150,18],150],[[149,18],149],[[151,18],151],[[152,18],152],[[151,18],151],[[152,18],152],[[153,18],153],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[154,18],154],[[148,18],148],[[149,18],149],[[150,18],150],[151,4],[152,4],[155,4],[153,4],[156,4],[154,4],[157,4],[158,4],[159,4],[160,4],[161,4],[162,4],[163,4],[164,4],[148,4],[149,4],[165,4],[166,4],[150,4],[167,4],[168,4],[169,4],[151,151],[152,152],[160,160],[162,162],[148,148],[165,165],[166,166],[169,169],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[151,18],151],[[154,18],154],[[154,18],154],[[150,[89,[170]]],150],[[154,[89,[171]]],154],[[166,18],166],[[167,18],167],[[165,120],165],[[],151],[[],152],[[],155],[[],153],[[],156],[[],154],[[],157],[[],158],[[],159],[[],160],[[],161],[[],162],[[],163],[[],164],[[],148],[[],149],[[],165],[[],166],[[],150],[[],167],[[],168],[[],169],[[150,18],150],[[162,51],162],[[165,51],165],[[169,18],169],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[150,150],[150,150],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[22],[157,157],[153,153],[150,150],[[151,18],151],[[152,18],152],[[156,18],156],[[154,18],154],[[159,18],159],[[160,18],160],[[161,18],161],[[162,18],162],[[148,18],148],[[149,18],149],[[165,18],165],[[150,18],150],[[168,18],168],[[169,18],169],[[150,18],150],[[152,18],152],[[151,27],28],[[152,27],28],[[153,27],28],[[156,27],28],[[154,27],28],[[157,27],28],[[158,27],28],[[159,27],28],[[160,27],28],[[161,27],28],[[164,27],28],[[148,27],28],[[149,27],28],[[165,27],28],[[166,27],28],[[150,27],28],[[168,27],28],[[169,27],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,[[4,[151]]]],[[[34,[33,33]]],151],[[[34,[33,33]]],152],[[[34,[33,33]]],155],[[[34,[33,33]]],153],[[[34,[33,33]]],156],[[[34,[33,33]]],154],[[[34,[33,33]]],157],[[[34,[33,33]]],158],[[[34,[33,33]]],159],[[[34,[33,33]]],160],[[[34,[33,33]]],161],[[[34,[33,33]]],162],[[[34,[33,33]]],163],[[[34,[33,33]]],164],[[[34,[33,33]]],148],[[[34,[33,33]]],149],[[[34,[33,33]]],165],[[[34,[33,33]]],166],[[[34,[33,33]]],150],[[[34,[33,33]]],167],[[[34,[33,33]]],168],[[[34,[33,33]]],169],[[151,99],151],[[152,99],152],[[154,99],154],[[157,99],157],[[159,99],159],[[160,99],160],[[161,99],161],[[148,99],148],[[149,99],149],[[150,99],150],[[168,99],168],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[164,20],164],[[164,18],164],[[158,18],158],[[156,18],156],[[159,18],159],[[165,18],165],[[168,18],168],[[149,18],149],[[150,18],150],[[150,18],150],[[151,18],151],[[152,18],152],[[155,18],155],[[153,18],153],[[156,18],156],[[154,18],154],[[157,18],157],[[158,18],158],[[159,18],159],[[160,18],160],[[161,18],161],[[162,18],162],[[163,18],163],[[148,18],148],[[149,18],149],[[165,18],165],[[166,18],166],[[150,18],150],[[167,18],167],[[168,18],168],[[169,18],169],[[151,18],151],[[154,18],154],[[148,18],148],[[150,18],150],[[150,18],150],[[164,22],164],[[150,18],150],[[150,18],150],[[150,18],150],[[150,18],150],[[150,18],150],[150,150],[[150,18],150],[[150,18],150],[150,150],[[154,18],154],[[164,11],164],[[164,51],164],[[164,51],164],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[159,18],159],[[168,18],168],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[156,18],156],[[159,18],159],[[165,18],165],[[168,18],168],[[157,18],157],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[3,"Writer"],[3,"Bytes"],[8,"Into"],[6,"Result"],[3,"BlockingWriter"],[4,"Metakey"],[3,"FlagSet"],[3,"Operator"],[3,"BlockingOperator"],[3,"OperatorInfo"],[15,"bool"],[4,"EntryMode"],[3,"Entry"],[3,"Metadata"],[4,"ErrorKind"],[4,"Scheme"],[3,"Compat"],[15,"str"],[4,"Option"],[15,"u64"],[3,"BytesContentRange"],[15,"usize"],[8,"Accessor"],[3,"OperatorBuilder"],[6,"Result"],[3,"Error"],[3,"Formatter"],[6,"Result"],[4,"FtpError"],[3,"RedisError"],[3,"Error"],[8,"Iterator"],[3,"String"],[3,"HashMap"],[4,"Result"],[3,"Utc"],[3,"DateTime"],[8,"Layer"],[6,"FusedAccessor"],[3,"Lister"],[3,"BlockingLister"],[8,"Builder"],[3,"BlockingReader"],[3,"Vec"],[3,"Pin"],[3,"Context"],[4,"Poll"],[3,"Reader"],[3,"ReadBuf"],[4,"SeekFrom"],[3,"Duration"],[3,"PresignedRequest"],[3,"OpRead"],[3,"OpWrite"],[3,"Demand"],[8,"RangeBounds"],[15,"u8"],[8,"Stream"],[8,"Unpin"],[3,"Error"],[8,"Error"],[3,"TypeId"],[3,"Error"],[3,"ConcurrentLimitLayer"],[3,"ImmutableIndexLayer"],[3,"LoggingLayer"],[3,"ChaosLayer"],[3,"MetricsLayer"],[3,"RetryLayer"],[3,"TracingLayer"],[3,"MinitraceLayer"],[15,"f64"],[4,"Level"],[15,"f32"],[3,"OpCreate"],[3,"OpDelete"],[3,"OpList"],[3,"OpScan"],[3,"OpPresign"],[4,"PresignOperation"],[3,"OpBatch"],[4,"BatchOperation"],[3,"OpStat"],[3,"OpCopy"],[3,"OpRename"],[4,"Operation"],[3,"BytesRange"],[8,"Future"],[3,"Box"],[4,"AccessorCapability"],[4,"AccessorHint"],[3,"RpCopy"],[3,"RpCreate"],[3,"RpDelete"],[3,"RpRename"],[3,"RpStat"],[3,"ErrorResponse"],[3,"ClientBuilder"],[3,"HttpClient"],[3,"HeaderValue"],[3,"IncomingAsyncBody"],[3,"AccessorInfo"],[3,"Client"],[3,"RpList"],[3,"RpScan"],[3,"RpPresign"],[3,"RpRead"],[3,"RpWrite"],[4,"AsyncBody"],[4,"BatchedReply"],[3,"Metadata"],[3,"HeaderMap"],[3,"RpBatch"],[8,"FnOnce"],[3,"Method"],[3,"Uri"],[3,"Error"],[3,"Error"],[4,"DeError"],[15,"i64"],[3,"Response"],[3,"Range"],[3,"RangeInclusive"],[3,"Request"],[3,"StatusCode"],[8,"Adapter"],[3,"Backend"],[8,"Clone"],[8,"Debug"],[4,"ReadOperation"],[4,"WriteOperation"],[3,"Entry"],[4,"PageOperation"],[3,"Cursor"],[3,"IntoStreamableReader"],[8,"BlockingRead"],[6,"Pager"],[6,"BlockingPager"],[3,"ToFlatPager"],[8,"BlockingPage"],[3,"ToHierarchyPager"],[8,"Page"],[8,"Read"],[3,"FdReader"],[3,"Arc"],[3,"RangeReader"],[3,"FdReader"],[3,"Obs"],[3,"Oss"],[3,"S3"],[3,"Azblob"],[3,"Azdfs"],[3,"Fs"],[3,"Gcs"],[3,"Dashmap"],[3,"Ftp"],[3,"Ghac"],[3,"Hdfs"],[3,"Http"],[3,"Ipfs"],[3,"Ipmfs"],[3,"Memcached"],[3,"Memory"],[3,"Moka"],[3,"Redis"],[3,"Rocksdb"],[3,"Sled"],[3,"Webdav"],[3,"Webhdfs"],[8,"CredentialLoad"],[8,"TokenLoad"],[8,"LayeredAccessor"],[8,"BlockingWrite"],[8,"Write"],[8,"ReadExt"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
